#BlueJ class context
comment0.params=mover
comment0.target=DriftMove(greenfoot.Actor)
comment0.text=\n\ The\ simple\ constructor\ only\ needs\ one\ argument,\ which\ is\ the\ actor\ who\ will\ be\ drifting.\n
comment1.params=mover\ maxSpeed
comment1.target=DriftMove(greenfoot.Actor,\ int)
comment1.text=\n\ The\ more\ advanced\ constructor\ allows\ you\ to\ set\ a\ maximum\ speed\ at\ which\ the\ object\ will\ drift.\ This\n\ is\ the\ maximum\ speed\ in\ the\ x\ and\ y\ direction.\ \n
comment10.params=rate
comment10.target=void\ fall(double)
comment10.text=\n\ The\ fall()\ method\ causes\ your\ actor\ to\ accelerate\ downward\ at\ the\ rate\ of\ the\ \n\ double\ argument\ you\ pass\ it.\n
comment11.params=deltaX\ deltaY
comment11.target=void\ setSpeed(double,\ double)
comment11.text=\n\ The\ setSpeed()\ method\ allows\ you\ to\ set\ the\ ship's\ absolute\ speed\ in\n\ the\ x\ and\ y\ direction.\n
comment12.params=maxDeltaX\ maxDeltaY
comment12.target=void\ setRandomSpeed(double,\ double)
comment12.text=\n\ Sets\ a\ random\ x\ and\ y\ speed\ up\ to\ maxDeltaX\ and\ maxDeltaY\ arguments\ in\ a\ random\ direction.\n
comment13.params=
comment13.target=void\ stopMoving()
comment13.text=\n\ Stops\ all\ x\ and\ y\ motion\n
comment14.params=reflectorClass
comment14.target=void\ bounceOffObject(java.lang.Class)
comment14.text=\n\ Bounces\ off\ another\ actor\ of\ object\ of\ reflectorClass.\ Not\ pixel-perfect,\ treats\ both\ actors\ as\ rectangular\ objects.\n
comment2.params=amount\ direction
comment2.target=void\ accelerate(double,\ int)
comment2.text=\n\ The\ accelerate()\ method\ is\ the\ basic\ method\ for\ acceleration.\ Usually\ it\ won't\ be\ used,\ but\ it's\ made\ \n\ public\ because\ you\ might\ want\ to\ control\ the\ acceleration\ directly\ from\ another\ object.\ It\ takes\n\ two\ arguments,\ the\ amount\ of\ acceleration\ and\ the\ direction.\ The\ amount\ will\ automatically\ be\ \n\ converted\ to\ the\ correct\ deltaX\ and\ deltaY\ to\ match\ the\ direction.\n
comment3.params=
comment3.target=void\ drift()
comment3.text=\n\ To\ use\ the\ DriftMove\ object,\ you\ must\ call\ the\ drift()\ method\ in\ your\ act()\ method.\ It\ needs\ no\ arguments.\n
comment4.params=
comment4.target=void\ bounceAtEdge()
comment4.text=\n\ The\ bounceAtEdge()\ method\ makes\ you\ bounce\ when\ you\ hit\ the\ edge\ of\ the\ screen.\ It\ needs\ no\n\ arguments.\n
comment5.params=
comment5.target=void\ wrapAtEdge()
comment5.text=\n\ The\ wrapAtEdge()\ method\ makes\ you\ wrap\ to\ the\ other\ side\ of\ the\ screen\ when\ you\ hit\ \n\ the\ edge\ of\ the\ screen.\ It\ needs\ no\ arguments.\ \n
comment6.params=
comment6.target=void\ turnAccelMouse()
comment6.text=\n\ The\ simple\ version\ calls\ for\ no\ arguments\ and\ accelerates\ at\ a\ rate\ of\ 0.2\ pixels\ per\ turn\n\ every\ time\ you\ press\ the\ mouse\ button.\n
comment7.params=accelAmount
comment7.target=void\ turnAccelMouse(double)
comment7.text=\n\ The\ more\ advanced\ version\ of\ this\ includes\ an\ argument\ for\ how\ much\ the\ actor\ will\ accelerate\ when\ the\ mouse\ is\ pressed.\ \n
comment8.params=
comment8.target=void\ turnAccelArrows()
comment8.text=\n\ The\ simple\ version\ of\ this\ method\ has\ no\ arguments\ and\ turns\ five\ degrees\ every\ time\ you\ press\n\ the\ arrows\ and\ accelerates\ at\ a\ rate\ of\ 0.2\ pixels\ per\ turn\ every\ time\ you\ press\ the\ up\ arrow.\n
comment9.params=accelAmount\ turnSpeed
comment9.target=void\ turnAccelArrows(double,\ int)
comment9.text=\n\ The\ more\ advanced\ version\ of\ turnAccelArrows\ calls\ a\ decimal\ (double)\ argument\ for\ \n\ acceleration\ and\ an\ integer\ argument\ for\ turn\ speed.\n
numComments=15
